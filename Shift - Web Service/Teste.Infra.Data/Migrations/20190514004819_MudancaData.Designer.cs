// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teste.Infra.Data.Context;

namespace Teste.Infra.Data.Migrations
{
    [DbContext(typeof(TesteContext))]
    [Migration("20190514004819_MudancaData")]
    partial class MudancaData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Teste.Domain.Entities.Bairro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("IdCidade");

                    b.HasKey("Id");

                    b.HasIndex("IdCidade");

                    b.ToTable("Bairro");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Vila América",
                            IdCidade = 1
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Centro",
                            IdCidade = 1
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Vila Imperial",
                            IdCidade = 2
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Centro",
                            IdCidade = 2
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("Estado");

                    b.HasKey("Id");

                    b.ToTable("Cidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Votuporanga",
                            Estado = 25
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "São José do Rio Preto",
                            Estado = 25
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Convenio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Unimed"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "HB Saúde"
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Especialidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Dermatologia"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Neurologia"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Pediatria"
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Exame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("IdSetor");

                    b.Property<string>("MaterialBiologico")
                        .IsRequired();

                    b.Property<int>("Prazo");

                    b.HasKey("Id");

                    b.HasIndex("IdSetor");

                    b.ToTable("Exame");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Exame de Glicose",
                            IdSetor = 1,
                            MaterialBiologico = "Sangue",
                            Prazo = 4
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Hemograma",
                            IdSetor = 2,
                            MaterialBiologico = "Sangue",
                            Prazo = 3
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdEspecialidade");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdEspecialidade");

                    b.ToTable("Medico");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdEspecialidade = 1,
                            Nome = "Daniela Aline Aurora Costa"
                        },
                        new
                        {
                            Id = 2,
                            IdEspecialidade = 2,
                            Nome = "Francisco Eduardo Lucca Teixeira"
                        },
                        new
                        {
                            Id = 3,
                            IdEspecialidade = 3,
                            Nome = "Giovanni Matheus Santos"
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.OrdemServico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2019, 5, 13, 21, 48, 19, 262, DateTimeKind.Local).AddTicks(7738));

                    b.Property<int>("IdConvenio");

                    b.Property<int>("IdMedico");

                    b.Property<int>("IdPaciente");

                    b.Property<int>("IdPostoColeta");

                    b.HasKey("Id");

                    b.HasIndex("IdConvenio");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPostoColeta");

                    b.ToTable("OrdemServico");
                });

            modelBuilder.Entity("Teste.Domain.Entities.OrdemServicoExame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("EntregaResultado");

                    b.Property<int>("IdExame");

                    b.Property<int>("IdOrdemServico");

                    b.Property<decimal>("Preco");

                    b.HasKey("Id");

                    b.HasIndex("IdExame");

                    b.HasIndex("IdOrdemServico");

                    b.ToTable("OrdemServicoExame");
                });

            modelBuilder.Entity("Teste.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Endereco")
                        .IsRequired();

                    b.Property<int>("IdCidade");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Sexo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdCidade");

                    b.ToTable("Paciente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1998, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua Chile, 4219",
                            IdCidade = 1,
                            Nome = "Vinícius Eduardo Alves Oliveira",
                            Sexo = "Masculino"
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.PostoColeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("IdBairro");

                    b.HasKey("Id");

                    b.HasIndex("IdBairro");

                    b.ToTable("PostoColeta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Posto de coleta 01",
                            IdBairro = 1
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.PrecoExame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdConvenio");

                    b.Property<int>("IdExame");

                    b.Property<decimal>("Preco");

                    b.HasKey("Id");

                    b.HasIndex("IdConvenio");

                    b.HasIndex("IdExame");

                    b.ToTable("PrecoExame");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdConvenio = 1,
                            IdExame = 1,
                            Preco = 89.90m
                        },
                        new
                        {
                            Id = 2,
                            IdConvenio = 1,
                            IdExame = 2,
                            Preco = 55.00m
                        },
                        new
                        {
                            Id = 3,
                            IdConvenio = 2,
                            IdExame = 1,
                            Preco = 99.90m
                        },
                        new
                        {
                            Id = 4,
                            IdConvenio = 2,
                            IdExame = 2,
                            Preco = 60.00m
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Setor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Bioquímica"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Hematologia"
                        });
                });

            modelBuilder.Entity("Teste.Domain.Entities.Bairro", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Cidade", "Cidade")
                        .WithMany("Bairros")
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.Exame", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Setor", "Setor")
                        .WithMany("Exames")
                        .HasForeignKey("IdSetor")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.Medico", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("IdEspecialidade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.OrdemServico", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Convenio", "Convenio")
                        .WithMany("OrdensServico")
                        .HasForeignKey("IdConvenio")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teste.Domain.Entities.Medico", "Medico")
                        .WithMany("OrdensServico")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teste.Domain.Entities.Paciente", "Paciente")
                        .WithMany("OrdensServico")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teste.Domain.Entities.PostoColeta", "PostoColeta")
                        .WithMany("OrdensServico")
                        .HasForeignKey("IdPostoColeta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.OrdemServicoExame", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Exame", "Exame")
                        .WithMany("OrdemServicoExames")
                        .HasForeignKey("IdExame")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teste.Domain.Entities.OrdemServico", "OrdemServico")
                        .WithMany("Exames")
                        .HasForeignKey("IdOrdemServico")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Cidade", "Cidade")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.PostoColeta", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Bairro", "Bairro")
                        .WithMany("PostosColeta")
                        .HasForeignKey("IdBairro")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teste.Domain.Entities.PrecoExame", b =>
                {
                    b.HasOne("Teste.Domain.Entities.Convenio", "Convenio")
                        .WithMany("PrecoExames")
                        .HasForeignKey("IdConvenio")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teste.Domain.Entities.Exame", "Exame")
                        .WithMany("PrecoExames")
                        .HasForeignKey("IdExame")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
